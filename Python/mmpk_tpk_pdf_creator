from ast import Pass
import arcpy 
import os
import shutil
from datetime import datetime
start_time = datetime.now()
print(f"Script Started on {start_time}")
print('modules imported')
output_path = r'C:\Users\HP\Desktop\RUN'
#map_folder= os.path.join(output_path,'Maps')
# arcpy.env.addOutputsToMap = True
#project_path = r'C:\Users\HP\OneDrive\Work\TZ\TZ Census\NBS\NBS.aprx'
prj = arcpy.mp.ArcGISProject('CURRENT')


curr_map = prj.listMaps()[0]
if curr_map.spatialReference.name != 'WGS_1984_Web_Mercator_Auxiliary_Sphere':
    print("Please change map projection to 'WGS_1984_Web_Mercator_Auxiliary_Sphere' ")
    exit(101)
layer = curr_map.listLayers()[0]
#f_layer= curr_map.listLayers('editting')[0]
#temp_layer = 'temp_layer'
project_name = prj.filePath.split(sep = '\\')[-1][:-5]
project_folder = os.path.join(output_path,'Maps',project_name)
arcpy.env.addOutputsToMap = True
arcpy.env.overwriteOutput = True

if not os.path.isdir(project_folder):
    os.mkdir(project_folder)

# if os.path.isdir(project_folder):
#     shutil.rmtree(project_folder)
# else:
#     os.mkdir(project_folder)
#os.mkdir(project_folder)
data_gdb = os.path.join(project_folder,'data.gdb')
if not os.path.isdir(data_gdb):
    arcpy.management.CreateFileGDB(project_folder,"data")
#arcpy.management.CreateFileGDB(project_folder,"data")

print('Clearing selection')
arcpy.management.SelectLayerByAttribute(layer, 'CLEAR_SELECTION')
print('Begin fc creation')

sFields = ['OBJECTID_1','geocode','reg_code','dist_code','counc_code','const_code','div_code','ward_code','vill_code',
            'dist_name','div_name','ward_name','vill_name','hamlet']
sCursor = arcpy.da.SearchCursor(layer,sFields )
count = 0
success_layers = []
failed_layers = []
layers=[]
fc_names = []
bm_names = []
locations = []
ls_folder_1 = []
ls_folder_2 = []
ls_folder_3 = []
ls_folder_4 = []
ls_folder_5 = []
ls_folder_6 = []
dist = []
div = []
ward_ls = []
vill = []
haml = []

for row in sCursor:
    #print(len(str(row[5])))
    strip_field = str(row[5]).strip()
    #print(len(str(row[5]).strip()))
    #if len(strip_field) > 0:
    if row[0] == 8:
        # if count ==5:
        #     break
        fc_name = 'fc'+ str(row[1])
        bm_name = 'bm'+ str(row[1])
        folder_1 = row[2]+row[3]+row[4]
        ls_folder_1.append(folder_1)

        folder_2 = folder_1 + row[5]
        ls_folder_2.append(folder_2)

        folder_3 = folder_2 + row[6]
        ls_folder_3.append(folder_3)

        folder_4 = folder_3 + row[7]
        ls_folder_4.append(folder_4)

        folder_5 = folder_4 + row[8]
        ls_folder_5.append(folder_5)

        folder_6 = row[1]
        ls_folder_6.append(folder_6)

        fc_names.append(fc_name)
        bm_names.append(bm_name)

        # append EA details to list. 

        dist.append(str(row[9]))
        div.append(str(row[10]))
        ward_ls.append(str(row[11]))
        vill.append(str(row[12]))
        haml.append(str(row[13]))
        print("Selecting layer")
        lyr = arcpy.management.SelectLayerByAttribute(layer, 'NEW_SELECTION',f'OBJECTID_1 = {row[0]}',None)
        #clipping_layers.append(lyr)


        arcpy.FeatureClassToFeatureClass_conversion(lyr,data_gdb,fc_name)
        print(f'{fc_name} feature has been created succesfully.')
        bm_location = os.path.join(data_gdb,f'{bm_name}')
        new_feature = curr_map.listLayers(f'{fc_name}')[0]
        print("Selecting basemap")
        basemap = curr_map.listLayers('Kaliua_tiles_z22_prj.tif')[0]
        desc = arcpy.Describe(new_feature)

        xmin = desc.extent.XMin -200
        ymin = desc.extent.YMin -200
        xmax = desc.extent.XMax +200
        ymax = desc.extent.YMax +200
        print('Clipping basemap')
        arcpy.management.Clip(basemap,f'{xmin} {ymin} {xmax} {ymax}',
                                 bm_location, 
                                 new_feature, "256",
                                  "NONE", "NO_MAINTAIN_EXTENT")
        # add newly created layer to new map
        print(f'{bm_name} basemap has been created succesfully.')
        count += 1
        success_layers.append(row[0])
        print('Number of layers:',len(curr_map.listLayers()))
        if(len(curr_map.listLayers()) > 2 ):
            print('Layer found...removing layer')
            curr_map.removeLayer(curr_map.listLayers(f'{fc_name}')[0])
            print(f'{fc_name} removed successfully')
            curr_map.removeLayer(curr_map.listLayers(f'{bm_name}')[0])
            print(f'{bm_name} removed successfully')
        # Remove after deployment to run over the whole dataset
        break
    else:
        failed_layers.append(row[0])

print(len(success_layers),'features have been converted successfully')
print('beginning phase 2')

#___________________________________#
# mmpk #
output_path = r'C:\Users\HP\Desktop\RUN\MMPK_TEST'
reference = os.path.join(output_path,'REFERENCE.lyrx')

#arcpy.env.workspace = r'C:\Users\HP\OneDrive\Work\TZ\TZ Census\NBS\NBS.gdb'
#project_path = r'C:\Users\HP\OneDrive\Work\TZ\TZ Census\NBS\NBS.aprx'
prj = arcpy.mp.ArcGISProject('CURRENT')


curr_map = prj.listMaps()[0]
layers = curr_map.listLayers()
layer = curr_map.listLayers()[0]
layer_x = layer
print(layer)
lyt = prj.listLayouts()[0]
mf = lyt.listElements('MAPFRAME_ELEMENT')[0]

mmpk_locations = []
#prj.saveACopy(new_project
for x in range(len(fc_names)):
    print('checking pdf and mmpk paths')

    #outfile = os.path.join(project_folder,folder_1,folder_2,folder_3,folder_4,folder_5,folder_6)
    outfile = os.path.join(project_folder,ls_folder_1[x],ls_folder_6[x])
    if not os.path.isdir(outfile):
         os.makedirs(outfile)

    tpk_path = os.path.join(outfile,f'{fc_names[x]}.tpk')
    if os.path.isfile(tpk_path):
        os.remove(tpk_path)
    mmpk_path = os.path.join(outfile,f'{fc_names[x]}.mmpk')
    if os.path.isfile(mmpk_path):
        os.remove(mmpk_path)
    pdf_path = os.path.join(outfile,f'{fc_names[x]}.pdf')
    if os.path.isfile(pdf_path):
        os.remove(pdf_path)

    mmpk_locations.append(mmpk_path)
    
    # For development All layers shall be removed
    current_layers = curr_map.listLayers()
    for ly in range(len(current_layers)):
        curr_map.removeLayer(current_layers[ly])
    # if len(layers)>2:
    #     curr_map.removeLayer(layers[-1])
    #     curr_map.removeLayer(layers[-2])
    # add data from the exported feature class and clipped basemap to the map
    print("Add new layer")    
    fc = os.path.join(data_gdb,fc_names[x])
    bm = os.path.join(data_gdb,bm_names[x])
    print('Basemap Added')
    curr_map.addDataFromPath(bm)
    print('FC Added')
    curr_map.addDataFromPath(fc)

    print(' number of layers after addition:',len(layers))
    arcpy.management.ApplySymbologyFromLayer(curr_map.listLayers()[0],reference,None,'DEFAULT')
    layers = curr_map.listLayers()
    lyt = prj.listLayouts()[0]
    mf = lyt.listElements('MAPFRAME_ELEMENT')[1]

    # Fill the dynamic text in the layout with data from the attributes
    Title = lyt.listElements('TEXT_ELEMENT','Title')[0]
    hamlet = lyt.listElements('TEXT_ELEMENT','Hamlet')[0]
    village = lyt.listElements('TEXT_ELEMENT','Village')[0]
    ward = lyt.listElements('TEXT_ELEMENT','Ward')[0]
    Division = lyt.listElements('TEXT_ELEMENT','Division')[0]
    District = lyt.listElements('TEXT_ELEMENT','District')[0]


    Title.text = f'ENUMERATION AREA NO: {fc_names[x][2:]}'
    hamlet.text = f'Hamlet: {haml[x]}'
    village.text = f'Village: {vill[x]}'
    ward.text = f'Ward: {ward_ls[x]}'
    Division.text = f'Division: {div[x]}'
    District.text = f'District: {dist[x]}'

    mf.camera.setExtent(mf.getLayerExtent(curr_map.listLayers()[0],False, True))

    print("Exporting pdf map")
    lyt.exportToPDF(pdf_path)

    # Get extent of the new feature class to limit the created map tile package to the extent of the feature
    new_feature = curr_map.listLayers(f'{fc_names[x]}')[0]
    desc = arcpy.Describe(new_feature)

    xmin = desc.extent.XMin - 200
    ymin = desc.extent.YMin  - 200
    xmax = desc.extent.XMax  + 200
    ymax = desc.extent.YMax  + 200

    print(f'Creating {fc_names[x]}.tpk ...')
    tpk_list = []
    
    arcpy.management.CreateMapTilePackage(curr_map, "ONLINE",tpk_path,
                                "PNG8", 20, None, "summmary", "tags, tags2", f'{xmin} {ymin} {xmax} {ymax}',
                                75, "tpk", 9)
    tpk_list.append(tpk_path)

    print(f"{fc_names[x]}.tpk has been successfully created.")

    ## __________________________________________________________##
    # Different size tpks for demo purposes

    # for size in range(3):
        
    #     max_zoom = 20-(size*2)
    #     tpks = tpk_path[:-4] + "_"+ str(max_zoom) + ".tpk"
    #     print(f'Creating {tpks}')
    #     if os.path.isfile(tpks):
    #         os.remove(tpks)
    #     tpk_list.append(tpks)

    #     arcpy.management.CreateMapTilePackage(curr_map, "ONLINE",tpks,
    #                                     "PNG8", max_zoom, None, "summmary", "tags, tags2", f'{xmin} {ymin} {xmax} {ymax}',
    #                                     75, "tpk", 9)
    #     print(f'{fc_names[x]}-{max_zoom}.tpk has been created successfully.')
    ##______________________________________________________________##
    print('creating MMPK files')
    # MMPK with service layers
    ##______________________________________________________________##
    # arcpy.management.CreateMobileMapPackage(curr_map,mmpk_path,None,
    #                                                 curr_map.listLayers()[0],'DEFAULT', 'CLIP',f'{fc_names[x][2:]}','MMMPK for download','DESC',
    #                                                 None,'Trevor Nganyi, Esriea',None,None,None,None,None,None,None,'INCLUDE_SERVICE_LAYERS')
    
    #curr_map.removeLayer(curr_map.listLayers()[0])
    #curr_map.removeLayer(curr_map.listLayers()[1])
    ##______________________________________________________________##
    arcpy.management.CreateMobileMapPackage(curr_map,mmpk_path,None,
                                                    curr_map.listLayers()[0],'DEFAULT', 'CLIP',f'{fc_names[x][2:]}','MMMPK for download','DESC',
                                                    None,'Trevor Nganyi, Esriea',None,None,None,None,None,None,None,None)
    print(f"{fc_names[x]}.mmpk has been successfully created.")
    print("Uploading Packages...")
    
    for tpk in tpk_list:
        arcpy.SharePackage_management(tpk,'username','password',
        f"Level {20} zoom",'TPK,NBS','Trevor Nganyi','EVERYBODY')
        print(f"{fc_names[x]}.tpk has been uploaded successfully")
    for mmpk in mmpk_locations:
        mmpk_name = mmpk.split(sep = '\\')[-1]
        print(f'Uploading {mmpk_name}...')
        arcpy.SharePackage_management(mmpk, "username", "password", 
                                    "My Summary", "tag1, tag2", 
                                    "Trevor Nganyi", None, None)    
    print(f'operation {x+1} completed')
## Begin Uploads##


end_time = datetime.now()
print(f"Script Completed on {end_time}")
duration = end_time-start_time
minutes = duration.total_seconds()/60

print(f'Duration taken: {minutes}')
